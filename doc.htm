<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>nphp - documentation</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
        <link href="css/prettify.css" rel="stylesheet" media="screen">
        <link href='http://fonts.googleapis.com/css?family=Oleo+Script:700&amp;subset=latin,latin-ext' rel='stylesheet' type='text/css'>
        <link rel="shortcut icon" href="img/favicon.png">
        <style type="text/css">

        body {
            padding-top: 20px;
            padding-bottom: 40px;
        }

        h1.title {
            color: #75aa72;
            font-family: 'Oleo Script', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            font-size: 50px;
        }

        .container-narrow {
            margin: 0 auto;
            max-width: 740px;
        }

        .container-narrow-header {
            max-width: 540px;
        }

        .footer {
            text-align: center;
            font-size: 11px;
            color: #999;
        }

        pre.prettyprint {
            padding: 10px;
            background-color: #f7f7f9;
            border: 1px solid #e1e1e8;
        }

        code, pre {
            margin-top: 5px;
            font-family: Consolas, Monaco, Menlo, "Courier New", monospace;
            color: #5e5e5e;
        }

        ul.nav-list li, ul.nav-list li a {
            font-size: 11px;
        }

        ul.nav-list li {
            line-height: 18px
        }

        .nav-list > li > a,
        .nav-list .nav-header {
            padding: 0 10px;
        }

        ul.nav-list {
            width: 123px;
        }

        .affix {
            top: 20px;
        }

        p.center {
            text-align: center;
        }

        </style>
    </head>
    <body>

        <div class="container-narrow container-narrow-header">

            <ul class="nav nav-pills pull-right">
                <li><a href="index.htm">Home</a></li>
                <li><a href="install.htm">Install</a></li>
                <li class="active"><a href="doc.htm">Documentation</a></li>
            </ul>

            <h1 class="title">nphp</h1>

        </div>
        <div class="container-narrow">

            <hr>

            <div class="row-fluid">
                <div class="span3" id="side-nav">
                    <ul class="nav nav-list" data-spy="affix" data-offset-top="100"> <!-- class: well -->
                        
                        <li class="nav-header">Installation &amp; basics</li>
                        <li><a href="#structure">Basic structure</a></li>
                        <li><a href="#lifecycle">Response/request lifecycle</a></li>
                        <!--<li><a href="#phpserver">PHP built-in server</a></li>-->
                        <li><a href="#rewrite">Rewrite rules</a></li>

                        <li class="nav-header">Application object</li>
                        <li><a href="#appproperties">Properties</a><li>
                        <li><a href="#appmethods">Methods</a><li>
                        <li><a href="#apprequest">Request object</a>
                        <li><a href="#appextend">Extending application</a><li>
                        <!--<li><a href="#appbestpractices">Best practices</a><li>-->
                        <!--<li><a href="#appdb">DB connectivity</a><li>-->

                        <li class="nav-header">Routes</li>
                        <li><a href="#routesexp">Simple regular expressions</a><li>
                        <li><a href="#routesdata">Data from URL</a><li>

                        <li class="nav-header">Controller classes</li>
                        <li><a href="#controllerabstract">Abstract controller</a><li>
                        <li><a href="#controllerrequest">Request data</a><li>
                        <li><a href="#controllerreturns">Return types</a><li>
                        <li><a href="#controllerresponse">Response object</a><li>
                        <li><a href="#templates">Templates</a><li>
                        <li><a href="#messages">Messages framework</a></li>

                        <li class="nav-header">Custom templates</li>
                        <li><a href="#templatessetup">Set up engine</a><li>
                        <li><a href="#templatesbootstrap">Global variables</a><li>
                        <li><a href="#templatescontroller">Extend controller abstract</a><li>

                        <li class="nav-header">Debugging</li>
                        <li><a href="#debugpage">Debug page</a><li>
                        <li><a href="#debugvars">Output variables</a><li>

                        <li class="nav-header">Project skeleton</li>
                        <li><a href="#skeletondl">Download</a><li>
                        <li><a href="#skeletonstructure">Structure</a><li>

                    </ul>
                </div>

                <div class="span9">
                    <div class="row-fluid">
                        <div class="span12" id="scroll-pane">
                            <!-- content -->

                            <h3>Installation and basics</h3>

                            <section id="structure">
                                <h4>Structure</h4>
                                <p>Nphp applications are usually started in <code>index.php</code> file, which acts as main entry point for each request. When deploying the projects it's best if you rewrite all incoming requests to this file. It makes urls human readable and hides technology used.</p>
                                <p>Only file that has to be imported is <code>nphp.php</code> - it takes care of importing everything else. In case of installation with composer you only have to require <code>vendor/autoload.php</code> for all your libraries installed with it.</p>
                                <p>Application's entry point requires only instance of Nphp_Application or class inherited from it. Method <code>start()</code> has to be called on that object. You can find out more about Nphp_Application objects in <a href="#applicationobject">next section</a>.</p>
                            </section>

                            <br>

                            <section id="lifecycle">
                                <h4>Response/request lifecycle</h4>
                                <p>When Nphp_Application's <code>start()</code> method is called, it tries to match requests's URL with regular expressions found in routes array. Upon match, new object is constructed from class that is mapped from matched URL. This object has to implement <a href="#controllerabstract">Nphp_ControllerAbstract abstract class</a>. Application object then calls method that corresponds to HTTP request's method - for example: if browser requesed page with GET method, <code>get()</code> will be called. <a href="#controllerrequest">Request</a>, that is of Nphp_Request class, is passed as only argument to that method. Method has to <a href="#controllerreturns">return</a> either string or Nphp_Response object. This process is also shown on flowchart below.</p><br>
                                <p class="center"><img src="img/lifecycle.jpg" alt="" class="img-polaroid"></p>
                            </section>

                            <br>

                            <section id="rewrite">
                                <h4>mod_rewrite and rewrite rules</h4>
                                <p>As written before, index.php is main entry point for applications, so it makes most sense if all requests are rewritten to pass through it. It makes URLs easily readable. This is possible with mod_rewrite on Apache and similar rewrite tools on other HTTP servers. Of course it shouldn't be forgotten to expose folder with static files. Below is example of such configuration for Apache, it can be either put in <code>.htaccess</code> file to be stored with full project or in virtual hosts configuration.</p>
                                <pre class="prettyprint"><code class="language-php">RewriteEngine On

RewriteRule ^static/.+\.(jpg|gif|png|ico|css|js)$ - [L]
RewriteRule ^(.*)$ index.php [QSA,L]</code></pre>
                            </section>

                            <br>

                            <h3 id="applicationobject">Application object</h3>

                            <section id="appproperties">
                                <h4>Properties</h4>
                                <p>Different properties of Nphp_Application object allow various settings for application, from turning debugging on and off to setting custom error pages. Most of the properties can be also set with similarly named <a href="#appmethods">methods</a>.</p>
                                <p>
                                    List of all properties:
                                </p>
                                <dl>

                                    <dt><span class="label label-success" title="public">routes</span></dt>
                                    <dd><em><a href="#routesexp">array</a></em>, maps regular expressions to controller classes</dd>

                                    <dt><span class="label label-success" title="public">request</span></dt>
                                    <dd><em><a href="#apprequest">Nphp_Request</a></em>, contains all request data needed in controllers</dd>

                                    <dt><span class="label label-success" title="public">debug</span></dt>
                                    <dd><em>boolean</em>, default FALSE, if set to TRUE, <a href="#debuggingpage">debugging page</a> will be displayed instead of error page and correct HTTP response code</dd>

                                    <dt><span class="label label-success" title="public">prefix</span></dt>
                                    <dd><em>string</em>, prefix that will be automatically added to all routes if application is not located directly on domain or subdomain<br>
                                    <small>For example: <code>"/prefix"</code> to match requests on <code>http://example.com/prefix/*</code></small></dd>

                                    <dt><span class="label label-success" title="public">error404</span></dt>
                                    <dd><em><a href="#controllerreturns">Nphp_Response</a></em>, response that is returned when error 404 is encountered, only when <code>debug</code> is set to FALSE<br>
                                    <small>By default, instance of <code>Nphp_Response404</code> is returned, it accepts string when creating, which is returned content, HTTP response code is set to 404. Feel free to extend or reuse same class for your custom error pages.</small></dd>

                                    <dt><span class="label label-success" title="public">error500</span></dt>
                                    <dd><em><a href="#controllerreturns">Nphp_Response</a></em>, response that is returned by controller when internal server error occurs, same as error404, only when <code>debug</code> is set to FALSE<br>
                                    <small>By default, instance of <code>Nphp_Response500</code> is returned, it accepts string when creating, which is returned content, HTTP response code is set to 500. Feel free to extend or reuse same class for your custom error pages.</small></dd>

                                    <dt><span class="label label-success" title="public">disableDebugToolbar</span></dt>
                                    <dd><em>boolean</em>, disables debug toolbar on pages, all output will be display on rendered pages, default PHP behavior, more in <a href="#debugvars">debugging</a></dd>

                                    <dt><span class="label label-important" title="private">startRequestTime</span></dt>
                                    <dd><em>float</em>, Unix time when request started, used to calculate load time on debug toolbar</dd>
                                    
                                </dl>
                            </section>

                            <br>

                            <section id="appmethods">
                                <h4>Methods</h4>
                                <p>For the most part public methods have same functionallity as <a href="#appproperties">properties</a>.</p>
                                <p>List of all methods:</p>
                                <dl>

                                    <dt><span class="label label-warning" title="public, must call parent's method when overriding">__construct ()</span></dt>
                                    <dd>constructor, sets up defaults for properties and sets up <a href="#apprequest">request object</a></dd>

                                    <dt><span class="label label-success" title="public">setRoutes ( array=[] )</span></dt>
                                    <dd>sets up <a href="#routesexp">routes array</a>, that maps regular expressions to controller classes</dd>

                                    <dt><span class="label label-success" title="public">setDebug ( boolean=FALSE )</span></dt>
                                    <dd>sets <code>debug</code> property, if set to TRUE, <a href="#debuggingpage">debugging page</a> will be displayed instead of error page and correct HTTP response code</dd>

                                    <dt><span class="label label-success" title="public">setPrefix ( string="" )</span></dt>
                                    <dd>sets <code>prefix</code> property, prefix that will be automatically added to all routes if application is not located directly on domain or subdomain<br>
                                    <small>For example: <code>"/prefix"</code> to match requests on <code>http://example.com/prefix/*</code></small></dd>

                                    <dt><span class="label label-success" title="public">bootstrap ( Nphp_Request )</span></dt>
                                    <dd>performes additional actions needed by each controller, gets executed right before controller's method (get, post, ...) is called. It can return either nothing or <code>Nphp_Response</code> object (which becomes available in controllers as response property of request object)</dd>

                                    <dt><span class="label label-warning" title="public, avoid overriding this method">start ()</span></dt>
                                    <dd>has to be called in application's entry point file (most commonly index.php), actually starts request/response cycle, calls bootstrap method, matches URL with routes, creates controller object, calls correct method, handles errors and returns error responses if needed, sets HTTP headers, adds debug toolbar to pages if enabled. It also calls <code>autoload($className)</code> method, which can be added to only <a href="#appextend">load controller classes needed by application</a> when routing is done</dd>
                                    
                                </dl>
                            </section>

                            <br>

                            <section id="apprequest">
                                <h4>Request object</h4>
                                <p>Request object, which is instance of Nphp_Request, gets automatically passed to <a href="#controllerrequest">controller methods</a>. It holds data of incoming request, such as URL, HTTP method, sent form data, cookies data, etc. Most of properties and methods are just aliases of built-in PHP objects and methods, they are just conveniently available in OOP manner.</p>
                                <p>Full list of properties and methods available on request objests:</p>
                                <dl>

                                    <dt><span class="label label-success" title="public">url</span></dt>
                                    <dd><em>string</em>, path part of the URL that was requested</dd>

                                    <dt><span class="label label-success" title="public">method</span></dt>
                                    <dd><em>string</em>, HTTP method of request</dd>

                                    <dt><span class="label label-success" title="public">response</span></dt>
                                    <dd><em>Nphp_Response</em>, <a href="#controllerreturns">default response</a> object that will be used for server's response, it's used for setting response headers (content, code, cookies, ...)</dd>

                                    <dt><span class="label label-success" title="public">args</span></dt>
                                    <dd><em>array</em>, array of arguments from regular expression matches in routes<br>
                                    <small>For example if you have <code>'^/edit/(?P&lt;user&gt;\w+)/(\d+)/$' => 'EditUserController'</code> in your routes and you access <code>/edit/testuser/7/</code>, args will look like:</small>
                                    <pre class="prettyprint"><code class="language-php">Array
(
["user"] => "testuser"
[1] => "testuser"
[2] => 7
)</code></pre>
                                    </dd>

                                    <dt><span class="label label-success" title="public">cookies</span></dt>
                                    <dd><em>array</em>, array of cookies, alias of <a href="http://php.net/manual/en/reserved.variables.cookies.php"><code>$_COOKIES</code></a></dd>

                                    <dt><span class="label label-success" title="public">files</span></dt>
                                    <dd><em>array</em>, array of uploaded files, alias of <a href="http://php.net/manual/en/reserved.variables.files.php"><code>$_FILES</code></a></dd>

                                    <dt><span class="label label-success" title="public">post</span></dt>
                                    <dd><em>array</em>, array of POST variables, alias of <a href="http://php.net/manual/en/reserved.variables.post.php"><code>$_POST</code></a></dd>
                                    
                                    <dt><span class="label label-success" title="public">get</span></dt>
                                    <dd><em>array</em>, array of GET variables, alias of <a href="http://php.net/manual/en/reserved.variables.get.php"><code>$_GET</code></a></dd>

                                    <dt><span class="label label-success" title="public">request</span></dt>
                                    <dd><em>array</em>, array of all request variables, combined POST, GET and COOKIE variables, alias of <a href="http://php.net/manual/en/reserved.variables.request.php"><code>$_REQUEST</code></a></dd>

                                    <dt><span class="label label-success" title="public">session</span></dt>
                                    <dd><em>array</em>, array of session variables, alias of <a href="http://php.net/manual/en/reserved.variables.session.php"><code>$_SESSION</code></a></dd>

                                    <dt><span class="label label-success" title="public">is_xhr</span></dt>
                                    <dd><em>boolean</em>, set to TRUE if <code>X-Requested-With</code> header is set to <code>"XMLHttpRequest"</code>, supported by modern JavaScript libraries</dd>

                                    <dt><span class="label label-success" title="public">setSessionValue ( key=Object, value=Object )</span></dt>
                                    <dd>sets value of PHP session variable, shortcut for <code>$_SESSION[key] = value;</code></dd>

                                    <dt><span class="label label-success" title="public">getSessionValue ( key=Object )</span></dt>
                                    <dd>returns value of PHP session variable, same as <code>$value = $_SESSION[key];</code></dd>

                                    <dt><span class="label label-success" title="public">removeSessionValue ( key=Object )</span></dt>
                                    <dd>unsets PHP session variable</dd>

                                    <dt><span class="label label-success" title="public">removeSessionValue ( key=Object )</span></dt>
                                    <dd><em>boolean</em>, returns TRUE if PHP session variable (key in session array) exists</dd>

                                    <dt><span class="label label-success" title="public">addMessage ( message=Object )</span></dt>
                                    <dd>adds flash message to current session, more info available <a href="#messages">here</a></dd>

                                    <dt><span class="label label-success" title="public">getMessages ()</span></dt>
                                    <dd><em>array</em>, gets and deletes all flash messages from current session, more info available <a href="#messages">here</a></dd>

                                </dl>
                            </section>

                            <br>

                            <section id="appextend">
                                <h4>Extending application</h4>
                                <p>Default application class is enough for small projects, but slightly bigger projects usually need more common objects needed in each request, that have to be available in controllers. One such example is database connection and another initialization of templating engine. Best option and most object oriented approach is subclassing <code>Nphp_Application</code> class and extending it for your own needs.</p>
                                <p>You're free to overwrite application's constructor, but be sure you call parent's <code>__construct</code> method.</p>
                                <p>Most useful method for setting up everything is <code>bootstrap</code>, which is called every time just before controller's method is called. It gets passed one parameter - which is default <a href="#apprequest">request object</a>. It can either return nothing or your own response that has to be Nphp_Response object. It will be used further on in each controller method call.</p>
                                <p>Another useful method which you can use is <code>autoload</code>. It gets called when URL path is matched to routing array and match is found. Controller's class name is then passed to it as a string and that can help you load appropriate class. It can return string with new name of class to import.</p>
                                <p>Example of such extended class and its usage:</p>
                                <pre class="prettyprint"><code class="language-php">class MyApplication extends Nphp_Application {

    public function __construct() {
        parent::__construct();
        // additional constructor code
    }

    public function __destruct() {
        // useful for closing database connections, file references, etc.
    }

    public function bootstrap($request) {
        $request->newParameter = "this will be available in controller";  
        return $request->response;
    }

    public function autoload($class) {
        require_once("controllers/{$class}.php");
    }

}

$application = new MyApplication();
$application->start();</code></pre>
                            </section>

                            <br>

                            <h3 id="routes">Routes</h3>

                            <section id="routesexp">
                                <h4>Simple regular expressions</h4>
                                <p>Routes are represented as simple PHP array object, mapping paths to controller classes. When each request is processed, it first gets matched, in order, to each element in this array. Matching is done with <code>preg_match</code> method, so regular expressions can be used for matching.</p>
                                <p>Examples of simple expressions:</p>
                                <pre class="prettyprint"><code class="language-php">$app->setRoutes(array(
    '^/$' => 'IndexController',
    '^/news/$' => 'NewsController',
    '^/news/1363/$' => 'NewsController'
));</code></pre>
                                <p>It is recommended to start each route with <code>^</code> and end with <code>$</code>, they are special regular expression characters, representing start and end of string, respectively.</p>
                            </section>

                            <br>

                            <section id="routesdata">
                                <h4>Data from URL</h4>
                                <p>Applications sometimes require dynamic urls, for example we created controller for editing blog posts, now we want it to be accessible and get blog post ID from url: <code>/blog/edit/123/</code>. Because routes are regular expressions, the solution is simple - we match <code>^/blog/edit/(\d+)/$</code>. <code>(\d+)</code> matches at least one number so this will match our path. This match result (number) will be available in controller as <code>$request->args[1]</code>, which we can use for setting up database query.</p>
                                <p>Named matches can also be used - in example above we could use <code>^/blog/edit/(?P&lt;blogid&gt;\d+)$</code>. In this case match data would be found in <code>$request->args["blogid"]</code>.
                                <p>More info on PHP's regular expressions can be found on <a href="http://php.net/manual/en/reference.pcre.pattern.syntax.php">their official page</a></p>
                                
                            </section>

                            <br>

                            <h3>Controller classes</h3>

                            <section id="controllerabstract">
                                <h4>Abstract controller</h4>
                                <p>Controller classes that routes are mapped to have to extend Nphp_ControllerAbstract, either directly or indirectly. This means it can be used as a base for your own controller abstract classes where additional features that are shared among controllers are implemented. Most basic example is extending nphp to support <a href="#customtemplates">templating engine of your choice</a> or create method to convert data to JSON format for your API.</p>
                                <p>In each instance of our controller we have to create methods that match HTTP methods we want to support on that URL. For example if we want server to respond only to <strong>GET methods</strong> create <code>get($request)</code> method. You're free to implement any method you want, as long as it's supported by your HTTP server. There is special method that responds to <strong>any method</strong>: <code>all($request)</code>.</p>
                                <p>Default controller has only few properties and methods:</p>
                                <dl>

                                    <dt><span class="label label-success" title="public">_application</span></dt>
                                    <dd><em>Nphp_Application</em>, application that called this controller</dd>

                                    <dt><span class="label label-success" title="public">request</span></dt>
                                    <dd><em>Nphp_Request</em>, another way to access <a href="#apprequest">request object</a></dd>

                                    <dt><span class="label label-success" title="public">render ( template=string, context=array )</span></dt>
                                    <dd><em>Nphp_Response</em>, method that takes template name, which is PHP file, as a string, extracts variables from context array so they're available in template and returns response with rendered template set as content</dd>

                                    <dt><span class="label label-success" title="public">redirect ( url=string )</span></dt>
                                    <dd><em>Nphp_ResponseRedirect</em>, returns response object that creates HTTP redirect (302) to specified url</dd>

                                </dl>
                                <p>Example of simple controller class that accepts GET and POST methods:</p>
                                <pre class="prettyprint"><code class="language-php">class IndexController extends Nphp_ControllerAbstract {
    public function get($request) {
        // output simple text
        return "Hello world!";
    }
    public function post($request) {
        // redirect to index
        return $this->redirect("/");
    }
}</code></pre>
                            </section>

                            <br>

                            <section id="controllerrequest">
                                <h4>Request data</h4>
                                <p>Each controller needs access to data that was sent with request and most of it is accessible from <a href="#apprequest">request object</a> that is passed to methods as parameter or available as controller property: <code>$this->request</code>. This data can be used to create database queries and other logic usually found in controllers.</p>
                            </section>

                            <br>

                            <section id="controllerreturns">
                                <h4>Return types</h4>
                                <p>Controller methods can return two different types of objects. First is <a href="#controllerresponse">Nphp_Response</a> object and other is simple string. If string is returned, nphp will construct new response object with default values. If Nphp_Response is returned its data will be used when sending response.</p>
                                <p>When request object is created, it also creates default response object, which can be used to manipulate response in controllers - for instance if we want to change output headers.</p>
                            </section>

                            <br>

                            <section id="controllerresponse">
                                <h4>Response object</h4>
                                <p>All response objects have some properties and methods for convenience. Values that are always needed by nphp have default values but feel free to change them. Here is list of these properties:</p>
                                <dl>

                                    <dt><span class="label label-success" title="public">code</span></dt>
                                    <dd><em>integer</em>, HTTP status code, default is <strong>200</strong></dd>

                                    <dt><span class="label label-success" title="public">headers</span></dt>
                                    <dd><em>array</em>, array of strings, headers that will be sent with response, there is one in by default: <strong>"Content-type: text/html; charset=UTF-8"</strong></dd>

                                    <dt><span class="label label-success" title="public">content</span></dt>
                                    <dd><em>string</em>, already rendered content that will be sent as body</dd>

                                    <dt><span class="label label-success" title="public">cookies</span></dt>
                                    <dd><em>array</em>, array of current cookies that were sent with request, alias of <code>$_COOKIES</code></dd>

                                    <dt><span class="label label-success" title="public">newCookies</span></dt>
                                    <dd><em>array</em>, array of new cookies that will be sent with response, each cookie has to be in specific form, it's recommended to use <code>addCookie()</code> method of response object</dd>

                                    <dt><span class="label label-success" title="public">setCode ( code=integer )</span></dt>
                                    <dd>sets <code>code</code> property, which is HTTP status code for response</dd>

                                    <dt><span class="label label-success" title="public">setHeaders ( headers=array )</span></dt>
                                    <dd>sets <code>headers</code> property, which is array of strings - headers to be sent</dd>

                                    <dt><span class="label label-success" title="public">addHeader ( header=string )</span></dt>
                                    <dd>adds header to <code>headers</code> property</dd>

                                    <dt><span class="label label-success" title="public">setContent ( content=string )</span></dt>
                                    <dd>sets <code>content</code> property, that is rendered body</dd>

                                    <dt><span class="label label-success" title="public">addCookie ( name=string, value=string, expire=integer, path=string, domain=string, secure=boolean, httponly=boolean )</span></dt>
                                    <dd>helper method for setting new cookies, they get addded to <code>newCookies</code> array and then set with <a href="http://php.net/manual/en/function.setcookie.php"><code>setcookie()</code></a> PHP method. Only name is required, check PHP's setcookie for defaults and options</dd>

                                </dl>
                                <p>There are few special types of builtin response objects:</p>
                                <ul>
                                    <li><em>Nphp_Response404</em> - same as basic response class but with code set to <strong>404</strong>, used for missing pages</li>
                                    <li><em>Nphp_Response500</em> - same as basic response class but with code set to <strong>500</strong>, used when server error occurs</li>
                                    <li><em>Nphp_ResponseRedirect</em> - is used for redirecting users to different URL, code used is <strong>302 (Found)</strong>, which is common way to perform a redirection. Its constructor accepts new URL/path as paremeter</li>
                                </ul>
                                <p>Redirects can be used as shown above in <a href="#controllerabstract">controller example</a> or with Nphp_ResponseRedirect object:</p>
                                <pre class="prettyprint"><code class="language-php">class IndexController extends Nphp_ControllerAbstract {
    public function get($request) {
        return new Nphp_ResponseRedirect("/redirect/path/");
    }
    public function post($request) {
        return new Nphp_Response404("This page is missing.");
    }
}</code></pre>
                            </section>

                            <br>

                            <section id="templates">
                                <h4>Templates</h4>
                                <p>Nphp doesn't have templating engine built in as we leave choice of engine to the users. For simple templating you can use basic PHP. You only need PHP file with template and call <code>render()</code> method of you controller class.</p>
                                <p>PHP template file (template.php):</p>
                                <pre class="prettyprint"><code class="language-php">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;title&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?= htmlspecialchars($username) ?&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
                                <p>Controller using template.php:</p>
                                <pre class="prettyprint"><code class="language-php">class IndexController extends ControllerAbstract {
    public function get($request) {
        $context = array("username" => "John Doe");
        return $this->render("template.php", $context);
    }
}</code></pre>
                                <p>Template paths are always relative to the folder containing file with <code>$application->start()</code> - so usually index.php.</p>
                            </section>

                            <br>

                            <section id="messages">
                                <h4>Messages framework</h4>
                                <p>This framework is used when we want to send message to current user - for example notification that account was created, item deleted, etc. This messages are added to session in one controller and then read in another. When they're read they're automatically removed from session as nphp assumes they were displayed. They work best in combination with some JavaScript that makes them visible and then closes after some time.</p>
                                <p>Messages are added and read from <a href="#apprequest">request objects</a>:</p>
                                <pre class="prettyprint"><code class="language-php">$request->addMessage("User registration was successful!");
$messagesArray = $request->getMessages();</code></pre>
                            </section>

                            <br>

                            <h3 id="applicationobject">Custom templates</h3>

                            <section id="templatessetup">
                                <h4>Set up engine</h4>
                                <p>Even though nphp supports basic PHP templates, this is usually not enough for bigger projects, so we encourage the use of other templating engines. There are plenty out there, but in this example we're going to use awesome <a href="http://twig.sensiolabs.org/">Twig templates</a>.</p>
                                <p>First step in setting up this engine, after downloading the source, is to set up Twig loader and environment so they're available in each request. This is done in our <a href="#appextend">extended application class'</a> bootstrap method:</p>
                                <pre class="prettyprint"><code class="language-php">// require Twig's autoloader
require_once("Twig/Autoloader.php");
// use filesystem loader - it loads templates from specified folder
$this->twigLoader = new Twig_Loader_Filesystem("templates");
// empty settings - we can specify default charset and other options here
$twigSettings = array();
// build environment from loader and settings - this is main object used to render templates
$this->twigEnvironment = new Twig_Environment($this->twigLoader, $twigSettings);</code></pre>
                            </section>

                            <br>

                            <section id="templatesbootstrap">
                                <h4>Global variables</h4>
                                <p>Another thing most projects use are some common variables that are needed in every page rendered, so it's best to have them defined in one place. Good examples are URL for static content, version of application, ...</p>
                                <p>We do this by creating global context which will be later added to each controller's context, just before rendering:</p>
                                <pre class="prettyprint"><code class="language-php">$this->globalCtx = array("staticUrl" => "http://static.example.com");</code></pre>
                            </section>

                            <section id="templatescontroller">
                                <h4>Extend controller abstract</h4>
                                <p>Last part needed is our own <code>render()</code> method in controllers we're going to use. Simplest way is to extend <code>Nphp_ControllerAbstract</code> and overwrite existing method. Make sure your controllers are inheriting from your new abstract class.</p>
                                <pre class="prettyprint"><code class="language-php">abstract class MyControllerAbstract extends Nphp_ControllerAbstract {
    public function render($template, $context) {
        $context = array_merge($context, $this->_application->globalCtx);
        return $this->_application->twig->render($template, $context);
    }
}</code></pre>
                                <p>Use is really simple:</p>
                                <pre class="prettyprint"><code class="language-php">class IndexController extends MyControllerAbstract {
    public function get($request) {
        $context = array("localVariable" => 1234);
        return $this->render("index.twig", $context);
    }
}</code></pre>
                                <pre class="prettyprint"><code class="language-php">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;title&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;img src="{{ staticUrl }}/logo.jpg"&gt;
        {{ localVariable }}
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
                            </section>

                            <h3 id="applicationobject">Debugging</h3>

                            <section id="debugpage">
                                <h4>Debug page</h4>
                                <p>While it's certainly possible to use debugger with nphp, there's another built-in tool that makes developers' life easier - debug page. When debug option of application is set to TRUE and error is encountered on page you'll get nice debugging output, with full stack trace, local variables and settings.</p>
                                <div class="row-fluid">
                                    <ul class="thumbnails">
                                        <li class="span6"><a href="img/debug.jpg" class="thumbnail"><img src="img/debug_thumb.jpg" alt=""></a></li>
                                        <li class="span6"><a href="img/debug2.jpg" class="thumbnail"><img src="img/debug2_thumb.jpg" alt=""></a></li>
                                    </ul>
                                </div>
                            </section>

                            <section id="debugvars">
                                <h4>Output variables</h4>
                                <p>Nphp disables all normal PHP output so only content that is returned from controller methods is sent as response body. Normal output counts everything that is output using <code>echo</code>, <code>print_r()</code>, <code>var_dump()</code> and similar functions and constructs. Instead of output everything is buffered and later either discarded if debug is set to FALSE or displayed in nphp debug toolbar if it's set to TRUE. Debug toolbar button is displayed at the right side of pages and can be pressed to show toolbar contents: PHP output and time it took to display the page. This toolbar can be disabled with setting application's <code>disableDebugToolbar()</code> to TRUE.</p>
                                <p class="center"><img src="img/toolbar.jpg" alt="" class="img-polaroid"></p>
                            </section>

                            <br>

                            <h3 id="applicationobject">Project skeleton</h3>

                            <section id="skeletondl">
                                <h4>Download</h4>
                                <p>Skeleton is project created to provide bootstrapping of new nphp projects. It uses Twig templates, as shown in example in this documentation, YAML file for various configuration settings and PDO for database layer. Files are split to folders, as described in <a href="#skeletonstructure">structure</a>.</p>
                                <p>You can use it by either cloning <a href="#">github repository</a> or using composer. Make sure you install all dependencies:</p>
                                <ul>
                                    <li><a href="install.htm">nphp library, of course</a></li>
                                    <li><a href="http://twig.sensiolabs.org/">Twig templates</a></li>
                                    <li><a href="http://code.google.com/p/spyc/">spyc library for processing YAML</a></li>
                                </ul>
                                <p>This is done automatically if you use <a href="http://getcomposer.org/">Composer</a>.</p>
                                <p class="text-error">Links and specific instructions coming soon.</p>
                            </section>

                            <br>

                            <section id="skeletonstructure">
                                <h4>Structure</h4>
                                <p class="text-error">Coming soon.</p>
                            </section>

                            <!-- end content -->
                        </div>
                    </div>
                </div>
            </div>

            <hr>

            <div class="footer">
                <p>&copy; Aleš Krištof 2013</p>
            </div>

        </div>

        <script src="http://code.jquery.com/jquery-latest.js"></script>
        <script src="js/bootstrap.min.js"></script>
        <script src="js/prettify.js"></script>
        <script>

            !function ($) {

                $(function(){

                    var $window = $(window)

                    // google pretty print
                    window.prettyPrint && prettyPrint()

                    // select current title in side navigation
                    $('body').scrollspy({target: '#side-nav'})

                })

            }(window.jQuery)

            // google analytics
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-37887486-1']);
            _gaq.push(['_trackPageview']);
            (function() {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();

        </script>
    </body>
</html>